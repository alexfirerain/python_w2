"""
 что такое аннотировать функцию?
 добавление документации: после параметра двоеточием добавляется тип параметра, или 'any'
 затем '-> ' с типом возвращаемого значение (или 'any')
 далее, после сигнатуры многострочный комментарий описание функции, параметров и возвращаемого.
"""

a = [1, 2]


def change_arr():
    a[0] = 0
    # не имеет права менять только немутабельные объекты
    # а мутабельные (списки например) можно, хотя и не надо


change_arr()
print(a)


# используй глобальные переменные поменьше

def print_array(array: list) -> None:
    """
    Распечатывает массив в стандартный поток вывода.1
    :param array: данный массив
    """
    for item in array:
        print(item)


words = ['Привет', 'Сансара']
print_array(words)


# проверь, не заиспользовал ли в функции внешнюю переменную случайно
# что пишем въ внешних переменных? КОНСТАНТЫ в первую очередь
# их неизменность в Питоне не проверяется, крупный шрифт просто соглашение

def circle_length(radius: float) -> float:
    return 2 * PI * radius


PI = 3.14  # можно вводить константу прямо перед вызовом, хотя лучше в начале ↑
radius = 3
print(f'Длина окружности с радиусом {radius} равна {circle_length(radius):.2f}')

# внутри функции, допустим, используется переменная с тем же именем

square = "Дворцовая площадь"


def squere_area(length, width):
    square = length * width  # затеняет строку, но внешнюю область не меняет
    return f'Площадь площади "{square}" = {square}'


print('Давай встретимся, где', square)  # используется глобальная
print(squere_area(320, 240))  # используется локальная
print('Ну что? Встречаемся, где', square)  # используется глобальная

def greet(name: str) -> None:
    print('Привет,', name)
    name = 'друг'
    print('Здравствуй,', name)

greet('Питер')

# как отбиться от глобальных переменных?
# даже адекватный человек в необычной ситуаци может оправдать защиту от дурака

# что хотели бы объявить глобально, объявим в функции "мейн"
def main():
    area = "Классная площадь"
    # здесь есть знание о всём определённом в модуле (файле)
    # оказывается, все вызовы делаются здесь!
    # однако внутри функций не видятся объявленные здесь константы
